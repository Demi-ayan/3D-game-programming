using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;

public class PlayerNav : MonoBehaviour
{
    private NavMeshAgent navAgent;

    public float patrol_Radius = 60f;//This variable helps hold the value of how far the next destination would be

    public float patrol_Timer = 5f;//A variable for how long the object would be moving to the destination

    private float timer_Count;//A variable for a timer to see how much time has passed since a new patrol started

    public void Awake()
    {
        //Gets the component of the nav agent attached the game object
        navAgent = GetComponent<NavMeshAgent>();
    }

    // Start is called before the first frame update
    public void Start()
    {
        //the timer count is initially set to the patrol timer
        timer_Count = patrol_Timer;
    }

    public void Patrol()
    {
        //the timer count increases 
        timer_Count += Time.deltaTime;
        //if the timer count is higher than the patrol timer...
        if (timer_Count > patrol_Timer)
        {
            //...the function to find a new destination is called
            SetNewRandomDestination();

            //and the timer is reset
            timer_Count = 0f;
        }
    }


    public void SetNewRandomDestination()
    {
        //A new vector is created to get the random location generated by the RandomNavSphere vector 3
        Vector3 newDestination = RandomNavSphere(transform.position, patrol_Radius, -1);
        //the nav agent then sets that random position as the new destination
        navAgent.SetDestination(newDestination);
    }


    public Vector3 RandomNavSphere(Vector3 originPOS, float radius, int layerMask)
    {
        //Create a new vector 3 that gets a random point within a sphere of the radius 1 multiplied by the float radius created
        Vector3 randDir = Random.insideUnitSphere * radius;
        //then add the random direction to the origin position
        randDir += originPOS;
        
        //This is used to store the data
        NavMeshHit navHit;

        //This is used to find a position within the range given,and ensure the the object never leave the navmesh, and returns true
        NavMesh.SamplePosition(randDir, out navHit, radius, layerMask);

        return navHit.position;
    }
}
